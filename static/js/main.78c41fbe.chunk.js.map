{"version":3,"sources":["store/modules/cart/types.ts","styles/global.ts","store/modules/cart/reducer.ts","store/modules/rootReducer.ts","store/modules/cart/actions.ts","services/api.ts","store/modules/cart/sagas.ts","store/modules/rootSaga.ts","store/index.ts","routes/Route.tsx","components/Card/styles.ts","components/Card/index.tsx","components/Catalog/styles.ts","components/Catalog/index.tsx","components/Cart/styles.ts","components/Cart/index.tsx","pages/Home/styles.ts","pages/Home/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["ActionTypes","createGlobalStyle","INITIAL_STATE","items","failedStockCheck","cart","state","action","produce","draft","type","addProductToCartSuccess","product","payload","productInCartIndex","findIndex","item","id","quantity","push","addProductToCartFailure","productId","combineReducers","api","axios","create","baseURL","checkProductStock","select","find","currentQuantity","call","get","data","put","all","takeLatest","addProductToCartRequest","rootSaga","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","Route","Component","component","rest","render","Container","styled","article","Card","dispatch","useDispatch","hasFailedStockCheck","useSelector","includes","handleAddProductToCart","useCallback","src","image_url","alt","className","title","Intl","NumberFormat","style","currency","format","price","onClick","main","Catalog","useState","catalog","setCatalog","useEffect","then","response","map","key","div","Cart","Title","h2","Home","Routes","path","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78c41fbe.chunk.js","sourcesContent":["export enum ActionTypes {\n  addProductToCartRequest = 'ADD_PRODUCT_TO_CART_REQUEST',\n  addProductToCartSuccess = 'ADD_PRODUCT_TO_CART_SUCCESS',\n  addProductToCartFailure = 'ADD_PRODUCT_TO_CART_FAILURE',\n}\n\nexport interface IProduct {\n  id: string;\n  title: string;\n  price: number;\n  image_url: string;\n}\n\nexport interface ICartItem {\n  product: IProduct;\n  quantity: number;\n}\n\nexport interface ICartState {\n  items: ICartItem[];\n  failedStockCheck: string[];\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    outline: 0;\n  }\n  body {\n    background: #ffffff;\n    color: #000000;\n    -webkit-font-smoothing: antialiased;\n  }\n  body, input, button {\n    font-family: 'Poppins', serif;\n    font-size: 1rem;\n  }\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n  button {\n    cursor: pointer;\n  }\n`;\n","import { Reducer } from 'redux';\nimport produce from 'immer';\nimport { ICartState, ActionTypes } from './types';\n\nconst INITIAL_STATE: ICartState = {\n  items: [],\n  failedStockCheck: [],\n};\n\nconst cart: Reducer<ICartState> = (state = INITIAL_STATE, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ActionTypes.addProductToCartSuccess: {\n        const { product } = action.payload;\n\n        const productInCartIndex = draft.items.findIndex(\n          item => item.product.id === product.id,\n        );\n\n        if (productInCartIndex >= 0) {\n          draft.items[productInCartIndex].quantity += 1;\n        } else {\n          draft.items.push({\n            product,\n            quantity: 1,\n          });\n        }\n\n        break;\n      }\n      case ActionTypes.addProductToCartFailure: {\n        draft.failedStockCheck.push(action.payload.productId);\n\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  });\n};\n\nexport default cart;\n","import { combineReducers } from 'redux';\n\nimport cart from './cart/reducer';\n\nexport default combineReducers({\n  cart,\n});\n","import { IProduct, ActionTypes } from './types';\n\nexport function addProductToCartRequest(product: IProduct) {\n  return {\n    type: ActionTypes.addProductToCartRequest,\n    payload: {\n      product,\n    },\n  };\n}\n\nexport function addProductToCartSuccess(product: IProduct) {\n  return {\n    type: ActionTypes.addProductToCartSuccess,\n    payload: {\n      product,\n    },\n  };\n}\n\nexport function addProductToCartFailure(productId: string) {\n  return {\n    type: ActionTypes.addProductToCartFailure,\n    payload: {\n      productId,\n    },\n  };\n}\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3333',\n});\n\n// https://my-json-server.typicode.com/FelipeDSR/Cart-redux\nexport default api;\n","import { all, takeLatest, select, call, put } from 'redux-saga/effects';\nimport { AxiosResponse } from 'axios';\nimport {\n  addProductToCartRequest,\n  addProductToCartSuccess,\n  addProductToCartFailure,\n} from './actions';\nimport { IState } from '../..';\nimport { ActionTypes } from './types';\nimport api from '../../../services/api';\n\ntype checkProductStockRequest = ReturnType<typeof addProductToCartRequest>;\n\ninterface IStockResponse {\n  id: string;\n  quantity: number;\n}\n\nfunction* checkProductStock({ payload }: checkProductStockRequest) {\n  const { product } = payload;\n\n  const currentQuantity: number = yield select((state: IState) => {\n    return (\n      state.cart.items.find(item => item.product.id === product.id)?.quantity ??\n      0\n    );\n  });\n\n  const availableStockResponse: AxiosResponse<IStockResponse> = yield call(\n    api.get,\n    `stock/${product.id}`,\n  );\n\n  if (availableStockResponse.data.quantity > currentQuantity) {\n    yield put(addProductToCartSuccess(product));\n  } else {\n    yield put(addProductToCartFailure(product.id));\n  }\n}\n\nexport default all([\n  takeLatest(ActionTypes.addProductToCartRequest, checkProductStock),\n]);\n","import { all } from 'redux-saga/effects';\n\nimport cart from './cart/sagas';\n\nexport default function* rootSaga() {\n  return yield all([cart]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './modules/rootReducer';\nimport rootSaga from './modules/rootSaga';\n\nimport { ICartState } from './modules/cart/types';\n\nexport interface IState {\n  cart: ICartState;\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport {\n  Route as ReactDOMRoute,\n  RouteProps as ReactDOMRouterProps,\n} from 'react-router-dom';\n\ninterface RouteProps extends ReactDOMRouterProps {\n  component: React.ComponentType;\n}\n\nconst Route: React.FC<RouteProps> = ({ component: Component, ...rest }) => {\n  return <ReactDOMRoute {...rest} render={() => <Component />} />;\n};\n\nexport default Route;\n","import styled from 'styled-components';\n\nexport const Container = styled.article`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  box-shadow: 2px 2px 11px 1px rgba(0, 0, 0, 0.2);\n\n  img {\n    width: 150px;\n    height: 150px;\n  }\n\n  strong {\n    margin-top: 10px;\n  }\n\n  button {\n    background-color: rgba(0, 0, 0, 0.1);\n    border: none;\n    padding: 5px 10px;\n    margin-top: 10px;\n  }\n\n  .out-of-stock {\n    color: grey;\n    font-style: italic;\n  }\n`;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { IState } from '../../store';\nimport { IProduct } from '../../store/modules/cart/types';\nimport { addProductToCartRequest } from '../../store/modules/cart/actions';\n\nimport { Container } from './styles';\n\ninterface CardProps {\n  product: IProduct;\n}\n\nconst Card: React.FC<CardProps> = ({ product }) => {\n  const dispatch = useDispatch();\n\n  const hasFailedStockCheck = useSelector<IState, boolean>(state => {\n    return state.cart.failedStockCheck.includes(product.id);\n  });\n\n  const handleAddProductToCart = useCallback(() => {\n    dispatch(addProductToCartRequest(product));\n  }, [dispatch, product]);\n\n  return (\n    <Container>\n      <img src={product.image_url} alt=\"product\" />\n      <strong className=\"title\">{product.title}</strong>\n      {hasFailedStockCheck ? (\n        <strong className=\"out-of-stock\">Out of stock</strong>\n      ) : (\n        <strong className=\"price\">\n          {Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL',\n          }).format(product.price)}\n        </strong>\n      )}\n      <button type=\"button\" onClick={handleAddProductToCart}>\n        Comprar\n      </button>\n    </Container>\n  );\n};\n\nexport default Card;\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  display: grid;\n  grid-template-columns: 150px 150px;\n  grid-gap: 15px;\n\n  @media screen and (min-width: 768px) {\n    display: grid;\n    grid-template-columns: 175px 175px 175px;\n    grid-gap: 15px;\n  }\n\n  @media screen and (min-width: 992px) {\n    display: grid;\n    grid-template-columns: 220px 220px 220px;\n    grid-gap: 15px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    display: grid;\n    grid-template-columns: 250px 250px 250px;\n    grid-gap: 15px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { IProduct } from '../../store/modules/cart/types';\n\nimport api from '../../services/api';\n\nimport Card from '../Card';\n\nimport { Container } from './styles';\n\nconst Catalog: React.FC = () => {\n  const [catalog, setCatalog] = useState<IProduct[]>([]);\n\n  useEffect(() => {\n    api.get('products').then(response => {\n      setCatalog(response.data);\n    });\n  }, []);\n\n  return (\n    <Container>\n      {catalog.map(product => (\n        <Card key={product.id} product={product} />\n      ))}\n    </Container>\n  );\n};\n\nexport default Catalog;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  box-shadow: 2px 2px 11px 1px rgba(0, 0, 0, 0.2);\n  width: 315px;\n  overflow-x: scroll;\n\n  @media screen and (min-width: 768px) {\n    width: 570px;\n    grid-template-columns: 175px 175px 175px;\n    grid-gap: 15px;\n  }\n\n  @media screen and (min-width: 992px) {\n    width: 705px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 795px;\n    overflow-x: unset;\n  }\n\n  table {\n    border-spacing: 0;\n    width: 100%;\n  }\n\n  th,\n  td {\n    padding: 8px;\n    text-align: start;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n  }\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { IState } from '../../store';\nimport { ICartItem } from '../../store/modules/cart/types';\nimport { Container } from './styles';\n\nconst Cart: React.FC = () => {\n  const items = useSelector<IState, ICartItem[]>(state => state.cart.items);\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Produto</th>\n            <th>Preço</th>\n            <th>Quantidade</th>\n            <th>Subtotal</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>TV 4k</td>\n            <td>R$ 900,00</td>\n            <td>1</td>\n            <td>R$ 900,00</td>\n          </tr>\n          {items.map(item => (\n            <tr key={item.product.id}>\n              <td>{item.product.title}</td>\n              <td>\n                {Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL',\n                }).format(item.product.price)}\n              </td>\n              <td>{item.quantity}</td>\n              <td>\n                {Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL',\n                }).format(item.quantity * item.product.price)}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  );\n};\n\nexport default Cart;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n","import React from 'react';\n\nimport Catalog from '../../components/Catalog';\nimport Cart from '../../components/Cart';\n\nimport { Container, Title } from './styles';\n\nconst Home: React.FC = () => {\n  return (\n    <Container>\n      <Title>Catalogo de produtos</Title>\n      <Catalog />\n      <Title>Carrinho</Title>\n      <Cart />\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport Route from './Route';\n\nimport Home from '../pages/Home';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" component={Home} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\n\nimport store from './store';\n\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <Router>\n      <Routes />\n\n      <GlobalStyle />\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}